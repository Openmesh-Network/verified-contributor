{
  "type": "deployment",
  "id": "VerifiedContributorStaking",
  "batch": "20240216_195127",
  "deploymentAddress": "0x97bd9fc828beab8acf457a3e9e14bc52a5f55f8d",
  "constructorArgs": [
    "0xf8412cDB8db7e9b4b23Eb2DD6dd02328A7B2Da37",
    "0x497422f05f709f879289b8b2e6CC7180A6829862",
    "3858024000000000"
  ],
  "to": "0x4e59b44847b379578588920ca78fbf26c0b4956c",
  "value": "0",
  "data": "0x000000000000000000000000000000000000000000000000000000544553543260e060405260008054600160a01b600160e01b031916600160a01b600160e01b0317905534801561002f57600080fd5b50604051610af7380380610af783398101604081905261004e916100f0565b73af7e68bcb2fc7295492a00177f14f59b92814e7061006c81610088565b506001600160a01b0392831660a052911660c052608052610133565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811681146100ed57600080fd5b50565b60008060006060848603121561010557600080fd5b8351610110816100d8565b6020850151909350610121816100d8565b80925050604084015190509250925092565b60805160a05160c05161096c61018b60003960008181610168015281816101f7015281816103ad015261066e0152600081816101b5015261063f01526000818160ee0152818161056201526105c4015261096c6000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80638da5cb5b116100715780638da5cb5b1461012b578063a694fc3a14610150578063b48509e614610163578063d1d58b251461018a578063f2fde38b1461019d578063f7c618c1146101b057600080fd5b80632e17de78146100ae578063379607f5146100c35780633e10e551146100d65780634d8d9e92146100e9578063715018a614610123575b600080fd5b6100c16100bc366004610844565b6101d7565b005b6100c16100d1366004610844565b6102d9565b6100c16100e436600461085d565b61031a565b6101107f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b6100c1610379565b6000546001600160a01b03165b6040516001600160a01b03909116815260200161011a565b6100c161015e366004610844565b61038d565b6101387f000000000000000000000000000000000000000000000000000000000000000081565b610110610198366004610844565b6104d7565b6100c16101ab3660046108a2565b6105ed565b6101387f000000000000000000000000000000000000000000000000000000000000000081565b6040516331a9108f60e11b81526004810182905233906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690636352211e90602401602060405180830381865afa15801561023e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061026291906108bf565b6001600160a01b0316146102895760405163255a74af60e11b815260040160405180910390fd5b61029281610630565b600081815260016020526040808220805467ffffffffffffffff191690555182917f16700825aa6607ffefaeb83e81057f12d39f973a5e078e2b5244155224c56b8a91a250565b6102e281610630565b6102eb42610799565b600091825260016020526040909120805467ffffffffffffffff19166001600160401b03909216919091179055565b6103226107c7565b806001600160401b031642111561034c5760405163e00c687760e01b815260040160405180910390fd5b600080546001600160401b03909216600160a01b0267ffffffffffffffff60a01b19909216919091179055565b6103816107c7565b61038b60006107f4565b565b6040516331a9108f60e11b81526004810182905233906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690636352211e90602401602060405180830381865afa1580156103f4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061041891906108bf565b6001600160a01b03161461043f5760405163255a74af60e11b815260040160405180910390fd5b6000818152600160205260409020546001600160401b03161561047557604051631392c23160e31b815260040160405180910390fd5b61047e42610799565b600082815260016020526040808220805467ffffffffffffffff19166001600160401b039490941693909317909255905182917f11658f9285ec73fac1515f3a09966dcad7880f985e458acc3c41ac5cb98fc4e891a250565b6000806104e342610799565b6000848152600160205260408120549192506001600160401b03909116908190036105215760405163da70723f60e01b815260040160405180910390fd5b6000546001600160401b03600160a01b909104811690831611156105c2576000546001600160401b03600160a01b909104811690821610156105b8576000547f00000000000000000000000000000000000000000000000000000000000000009061059d908390600160a01b90046001600160401b03166108f2565b6001600160401b03166105b09190610919565b949350505050565b5060009392505050565b7f000000000000000000000000000000000000000000000000000000000000000061059d82846108f2565b6105f56107c7565b6001600160a01b03811661062457604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b61062d816107f4565b50565b600061063b826104d7565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166340c10f197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316636352211e856040518263ffffffff1660e01b81526004016106ba91815260200190565b602060405180830381865afa1580156106d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106fb91906108bf565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101849052604401600060405180830381600087803b15801561074357600080fd5b505af1158015610757573d6000803e3d6000fd5b50505050817fbde2d72390af9d0444bb1c4f938971ecb673ed26f5f57f8fa44c553fe01d0d3a8260405161078d91815260200190565b60405180910390a25050565b60006001600160401b038211156107c357604051631a93c68960e11b815260040160405180910390fd5b5090565b6000546001600160a01b0316331461038b5760405163118cdaa760e01b815233600482015260240161061b565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561085657600080fd5b5035919050565b60006020828403121561086f57600080fd5b81356001600160401b038116811461088657600080fd5b9392505050565b6001600160a01b038116811461062d57600080fd5b6000602082840312156108b457600080fd5b81356108868161088d565b6000602082840312156108d157600080fd5b81516108868161088d565b634e487b7160e01b600052601160045260246000fd5b6001600160401b03828116828216039080821115610912576109126108dc565b5092915050565b8082028115828204841417610930576109306108dc565b9291505056fea2646970667358221220adcdb57d35cd2bf710ab49047c341ecf298c747bed52318ef2be816d8eafac8764736f6c63430008170033000000000000000000000000f8412cdb8db7e9b4b23eb2dd6dd02328a7b2da37000000000000000000000000497422f05f709f879289b8b2e6cc7180a6829862000000000000000000000000000000000000000000000000000db4da360e1000",
  "gas": "611385",
  "from": "0xaF7E68bCb2Fc7295492A00177f14F59B92814e70",
  "transactionSettings": {
    "chainId": "80001",
    "nonce": "447",
    "baseFee": "1500000015",
    "priorityFee": "1000000000"
  },
  "salt": "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000TEST2",
  "artifact": {
    "abi": [
      {
        "type": "constructor",
        "inputs": [
          {
            "name": "_rewardToken",
            "type": "address",
            "internalType": "contract IERC20MintBurnable"
          },
          {
            "name": "_stakeNFT",
            "type": "address",
            "internalType": "contract IERC721"
          },
          {
            "name": "_tokensPerSecond",
            "type": "uint256",
            "internalType": "uint256"
          }
        ],
        "stateMutability": "nonpayable"
      },
      {
        "type": "function",
        "name": "claim",
        "inputs": [
          { "name": "_tokenId", "type": "uint256", "internalType": "uint256" }
        ],
        "outputs": [],
        "stateMutability": "nonpayable"
      },
      {
        "type": "function",
        "name": "claimable",
        "inputs": [
          { "name": "_tokenId", "type": "uint256", "internalType": "uint256" }
        ],
        "outputs": [
          {
            "name": "claimableTokens",
            "type": "uint256",
            "internalType": "uint256"
          }
        ],
        "stateMutability": "view"
      },
      {
        "type": "function",
        "name": "owner",
        "inputs": [],
        "outputs": [
          { "name": "", "type": "address", "internalType": "address" }
        ],
        "stateMutability": "view"
      },
      {
        "type": "function",
        "name": "renounceOwnership",
        "inputs": [],
        "outputs": [],
        "stateMutability": "nonpayable"
      },
      {
        "type": "function",
        "name": "rewardToken",
        "inputs": [],
        "outputs": [
          {
            "name": "",
            "type": "address",
            "internalType": "contract IERC20MintBurnable"
          }
        ],
        "stateMutability": "view"
      },
      {
        "type": "function",
        "name": "setStakingEnd",
        "inputs": [
          { "name": "_stakingOver", "type": "uint64", "internalType": "uint64" }
        ],
        "outputs": [],
        "stateMutability": "nonpayable"
      },
      {
        "type": "function",
        "name": "stake",
        "inputs": [
          { "name": "_tokenId", "type": "uint256", "internalType": "uint256" }
        ],
        "outputs": [],
        "stateMutability": "nonpayable"
      },
      {
        "type": "function",
        "name": "stakeNFT",
        "inputs": [],
        "outputs": [
          { "name": "", "type": "address", "internalType": "contract IERC721" }
        ],
        "stateMutability": "view"
      },
      {
        "type": "function",
        "name": "tokensPerSecond",
        "inputs": [],
        "outputs": [
          { "name": "", "type": "uint256", "internalType": "uint256" }
        ],
        "stateMutability": "view"
      },
      {
        "type": "function",
        "name": "transferOwnership",
        "inputs": [
          { "name": "newOwner", "type": "address", "internalType": "address" }
        ],
        "outputs": [],
        "stateMutability": "nonpayable"
      },
      {
        "type": "function",
        "name": "unstake",
        "inputs": [
          { "name": "_tokenId", "type": "uint256", "internalType": "uint256" }
        ],
        "outputs": [],
        "stateMutability": "nonpayable"
      },
      {
        "type": "event",
        "name": "NFTStaked",
        "inputs": [
          {
            "name": "tokenId",
            "type": "uint256",
            "indexed": true,
            "internalType": "uint256"
          }
        ],
        "anonymous": false
      },
      {
        "type": "event",
        "name": "NFTUnstaked",
        "inputs": [
          {
            "name": "tokenId",
            "type": "uint256",
            "indexed": true,
            "internalType": "uint256"
          }
        ],
        "anonymous": false
      },
      {
        "type": "event",
        "name": "OwnershipTransferred",
        "inputs": [
          {
            "name": "previousOwner",
            "type": "address",
            "indexed": true,
            "internalType": "address"
          },
          {
            "name": "newOwner",
            "type": "address",
            "indexed": true,
            "internalType": "address"
          }
        ],
        "anonymous": false
      },
      {
        "type": "event",
        "name": "TokensClaimed",
        "inputs": [
          {
            "name": "tokenId",
            "type": "uint256",
            "indexed": true,
            "internalType": "uint256"
          },
          {
            "name": "tokens",
            "type": "uint256",
            "indexed": false,
            "internalType": "uint256"
          }
        ],
        "anonymous": false
      },
      { "type": "error", "name": "NFTAlreadyStaked", "inputs": [] },
      { "type": "error", "name": "NFTNotStaked", "inputs": [] },
      { "type": "error", "name": "NotYourNFT", "inputs": [] },
      { "type": "error", "name": "Overflow", "inputs": [] },
      {
        "type": "error",
        "name": "OwnableInvalidOwner",
        "inputs": [
          { "name": "owner", "type": "address", "internalType": "address" }
        ]
      },
      {
        "type": "error",
        "name": "OwnableUnauthorizedAccount",
        "inputs": [
          { "name": "account", "type": "address", "internalType": "address" }
        ]
      },
      { "type": "error", "name": "StakingEndMustBeInTheFuture", "inputs": [] }
    ],
    "bytecode": "0x60e060405260008054600160a01b600160e01b031916600160a01b600160e01b0317905534801561002f57600080fd5b50604051610af7380380610af783398101604081905261004e916100f0565b73af7e68bcb2fc7295492a00177f14f59b92814e7061006c81610088565b506001600160a01b0392831660a052911660c052608052610133565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811681146100ed57600080fd5b50565b60008060006060848603121561010557600080fd5b8351610110816100d8565b6020850151909350610121816100d8565b80925050604084015190509250925092565b60805160a05160c05161096c61018b60003960008181610168015281816101f7015281816103ad015261066e0152600081816101b5015261063f01526000818160ee0152818161056201526105c4015261096c6000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80638da5cb5b116100715780638da5cb5b1461012b578063a694fc3a14610150578063b48509e614610163578063d1d58b251461018a578063f2fde38b1461019d578063f7c618c1146101b057600080fd5b80632e17de78146100ae578063379607f5146100c35780633e10e551146100d65780634d8d9e92146100e9578063715018a614610123575b600080fd5b6100c16100bc366004610844565b6101d7565b005b6100c16100d1366004610844565b6102d9565b6100c16100e436600461085d565b61031a565b6101107f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b6100c1610379565b6000546001600160a01b03165b6040516001600160a01b03909116815260200161011a565b6100c161015e366004610844565b61038d565b6101387f000000000000000000000000000000000000000000000000000000000000000081565b610110610198366004610844565b6104d7565b6100c16101ab3660046108a2565b6105ed565b6101387f000000000000000000000000000000000000000000000000000000000000000081565b6040516331a9108f60e11b81526004810182905233906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690636352211e90602401602060405180830381865afa15801561023e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061026291906108bf565b6001600160a01b0316146102895760405163255a74af60e11b815260040160405180910390fd5b61029281610630565b600081815260016020526040808220805467ffffffffffffffff191690555182917f16700825aa6607ffefaeb83e81057f12d39f973a5e078e2b5244155224c56b8a91a250565b6102e281610630565b6102eb42610799565b600091825260016020526040909120805467ffffffffffffffff19166001600160401b03909216919091179055565b6103226107c7565b806001600160401b031642111561034c5760405163e00c687760e01b815260040160405180910390fd5b600080546001600160401b03909216600160a01b0267ffffffffffffffff60a01b19909216919091179055565b6103816107c7565b61038b60006107f4565b565b6040516331a9108f60e11b81526004810182905233906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690636352211e90602401602060405180830381865afa1580156103f4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061041891906108bf565b6001600160a01b03161461043f5760405163255a74af60e11b815260040160405180910390fd5b6000818152600160205260409020546001600160401b03161561047557604051631392c23160e31b815260040160405180910390fd5b61047e42610799565b600082815260016020526040808220805467ffffffffffffffff19166001600160401b039490941693909317909255905182917f11658f9285ec73fac1515f3a09966dcad7880f985e458acc3c41ac5cb98fc4e891a250565b6000806104e342610799565b6000848152600160205260408120549192506001600160401b03909116908190036105215760405163da70723f60e01b815260040160405180910390fd5b6000546001600160401b03600160a01b909104811690831611156105c2576000546001600160401b03600160a01b909104811690821610156105b8576000547f00000000000000000000000000000000000000000000000000000000000000009061059d908390600160a01b90046001600160401b03166108f2565b6001600160401b03166105b09190610919565b949350505050565b5060009392505050565b7f000000000000000000000000000000000000000000000000000000000000000061059d82846108f2565b6105f56107c7565b6001600160a01b03811661062457604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b61062d816107f4565b50565b600061063b826104d7565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166340c10f197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316636352211e856040518263ffffffff1660e01b81526004016106ba91815260200190565b602060405180830381865afa1580156106d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106fb91906108bf565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101849052604401600060405180830381600087803b15801561074357600080fd5b505af1158015610757573d6000803e3d6000fd5b50505050817fbde2d72390af9d0444bb1c4f938971ecb673ed26f5f57f8fa44c553fe01d0d3a8260405161078d91815260200190565b60405180910390a25050565b60006001600160401b038211156107c357604051631a93c68960e11b815260040160405180910390fd5b5090565b6000546001600160a01b0316331461038b5760405163118cdaa760e01b815233600482015260240161061b565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561085657600080fd5b5035919050565b60006020828403121561086f57600080fd5b81356001600160401b038116811461088657600080fd5b9392505050565b6001600160a01b038116811461062d57600080fd5b6000602082840312156108b457600080fd5b81356108868161088d565b6000602082840312156108d157600080fd5b81516108868161088d565b634e487b7160e01b600052601160045260246000fd5b6001600160401b03828116828216039080821115610912576109126108dc565b5092915050565b8082028115828204841417610930576109306108dc565b9291505056fea2646970667358221220adcdb57d35cd2bf710ab49047c341ecf298c747bed52318ef2be816d8eafac8764736f6c63430008170033",
    "compiler": { "version": "v0.8.23+commit.f704f362" },
    "contractName": "src/VerifiedContributorStaking.sol:VerifiedContributorStaking",
    "license": "MIT",
    "jsonDescription": {
      "language": "Solidity",
      "sources": {
        "lib/open-token/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
        },
        "lib/open-token/src/IERC20MintBurnable.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IERC20} from \"../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\";\n\ninterface IERC20MintBurnable is IERC20 {\n    /// @notice Mints tokens to a specific account.\n    /// @param account The account that will receive the minted tokens.\n    /// @param amount The amount of tokens to mint.\n    /// @dev Should be locked behind a permission/restriction.\n    function mint(address account, uint256 amount) external;\n\n    /// @notice Burns tokens from your account.\n    /// @param amount The amount of tokens to burn.\n    function burn(uint256 amount) external;\n}\n"
        },
        "lib/openmesh-admin/src/Openmesh.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nabstract contract Openmesh {\n    address constant OPENMESH_ADMIN = 0xaF7E68bCb2Fc7295492A00177f14F59B92814e70;\n}\n"
        },
        "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
        },
        "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC-721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC-721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\n     *   {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
        },
        "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
        },
        "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
        },
        "src/IVerifiedContributorStaking.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IERC721} from \"../lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\";\nimport {Ownable} from \"../lib/openzeppelin-contracts/contracts/access/Ownable.sol\";\n\nimport {IERC20MintBurnable} from \"../lib/open-token/src/IERC20MintBurnable.sol\";\n\ninterface IVerifiedContributorStaking {\n    error NotYourNFT();\n    error NFTAlreadyStaked();\n    error NFTNotStaked();\n    error StakingEndMustBeInTheFuture();\n    error Overflow();\n\n    event NFTStaked(uint256 indexed tokenId);\n    event TokensClaimed(uint256 indexed tokenId, uint256 tokens);\n    event NFTUnstaked(uint256 indexed tokenId);\n\n    /// @notice Stakes your NFT.\n    /// @param _tokenId The id of the NFT to stake.\n    function stake(uint256 _tokenId) external;\n\n    /// @notice Unstakes your NFT.\n    /// @param _tokenId The id of the NFT to unstake.\n    function unstake(uint256 _tokenId) external;\n\n    /// @notice Checks how much tokens are claimable.\n    /// @param _tokenId The id of the NFT to check claimable tokens.\n    function claimable(uint256 _tokenId) external view returns (uint256 claimableTokens);\n\n    /// @notice Claims all claimable tokens.\n    /// @param _tokenId The id of the NFT to claim tokens for.\n    /// @dev Can be called by any wallet, but tokens will be claimed to NFT owner.\n    function claim(uint256 _tokenId) external;\n}\n"
        },
        "src/VerifiedContributorStaking.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IERC721} from \"../lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\";\nimport {Ownable} from \"../lib/openzeppelin-contracts/contracts/access/Ownable.sol\";\nimport {Openmesh} from \"../lib/openmesh-admin/src/Openmesh.sol\";\n\nimport {IVerifiedContributorStaking, IERC20MintBurnable} from \"./IVerifiedContributorStaking.sol\";\n\ncontract VerifiedContributorStaking is Ownable, Openmesh, IVerifiedContributorStaking {\n    uint256 public immutable tokensPerSecond;\n    IERC20MintBurnable public immutable rewardToken;\n    IERC721 public immutable stakeNFT;\n    uint64 internal stakingOver = type(uint64).max;\n    mapping(uint256 => uint64) private lastClaim;\n\n    constructor(IERC20MintBurnable _rewardToken, IERC721 _stakeNFT, uint256 _tokensPerSecond) Ownable(OPENMESH_ADMIN) {\n        rewardToken = _rewardToken;\n        stakeNFT = _stakeNFT;\n        tokensPerSecond = _tokensPerSecond;\n    }\n\n    /// @inheritdoc IVerifiedContributorStaking\n    function stake(uint256 _tokenId) external {\n        if (stakeNFT.ownerOf(_tokenId) != msg.sender) {\n            revert NotYourNFT();\n        }\n        if (lastClaim[_tokenId] != 0) {\n            revert NFTAlreadyStaked();\n        }\n\n        lastClaim[_tokenId] = _toUint64(block.timestamp);\n        emit NFTStaked(_tokenId);\n    }\n\n    /// @inheritdoc IVerifiedContributorStaking\n    function unstake(uint256 _tokenId) external {\n        if (stakeNFT.ownerOf(_tokenId) != msg.sender) {\n            revert NotYourNFT();\n        }\n\n        _claim(_tokenId);\n\n        lastClaim[_tokenId] = 0;\n        emit NFTUnstaked(_tokenId);\n    }\n\n    /// @inheritdoc IVerifiedContributorStaking\n    function claimable(uint256 _tokenId) public view returns (uint256 claimableTokens) {\n        uint64 currentSeconds = _toUint64(block.timestamp);\n        uint64 lastClaimSeconds = lastClaim[_tokenId];\n        if (lastClaimSeconds == 0) {\n            revert NFTNotStaked();\n        }\n\n        if (currentSeconds > stakingOver) {\n            if (lastClaimSeconds < stakingOver) {\n                // Staking is over && havent claimed remaining tokens up until end date yet\n                return (stakingOver - lastClaimSeconds) * tokensPerSecond;\n            } else {\n                // Staking is over && all leftover have been claimed\n                return 0;\n            }\n        }\n\n        return (currentSeconds - lastClaimSeconds) * tokensPerSecond;\n    }\n\n    /// @inheritdoc IVerifiedContributorStaking\n    function claim(uint256 _tokenId) external {\n        _claim(_tokenId);\n\n        lastClaim[_tokenId] = _toUint64(block.timestamp);\n    }\n\n    /// Set enddate for rewards. No new rewards are stacked up after this date.\n    /// @param _stakingOver The enddate.\n    /// @notice Rewards stacked up until this date can still be claimed.\n    function setStakingEnd(uint64 _stakingOver) external onlyOwner {\n        if (block.timestamp > _stakingOver) {\n            revert StakingEndMustBeInTheFuture();\n        }\n\n        stakingOver = _stakingOver;\n    }\n\n    /// Safecast uint256 to uint64.\n    /// @param value The uint256 to cast.\n    function _toUint64(uint256 value) internal pure returns (uint64) {\n        if (value > type(uint64).max) {\n            revert Overflow();\n        }\n        return uint64(value);\n    }\n\n    /// Mints claimable tokens to the NFT owner.\n    /// @param _tokenId The NFT to claim the tokens for.\n    /// @dev Due to gas optimization this does not update lastClaim, IS SHOULD ALWAYS BE UPDATED.\n    function _claim(uint256 _tokenId) internal {\n        uint256 tokens = claimable(_tokenId);\n        rewardToken.mint(stakeNFT.ownerOf(_tokenId), tokens);\n        emit TokensClaimed(_tokenId, tokens);\n    }\n}\n"
        }
      },
      "settings": {
        "optimizer": { "enabled": true, "runs": 200 },
        "remappings": [
          "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
          "ds-test/=lib/forge-std/lib/ds-test/src/",
          "ens-contracts/=lib/open-token/lib/ens-reverse-registrar/lib/ens-contracts/contracts/",
          "ens-reverse-claimable/=lib/openmesh-admin/lib/ens-reverse-claimable/src/",
          "ens-reverse-registrar/=lib/open-token/lib/ens-reverse-registrar/src/",
          "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
          "forge-std/=lib/forge-std/src/",
          "open-token/=lib/open-token/src/",
          "openmesh-admin/=lib/openmesh-admin/src/",
          "openzeppelin-contracts/=lib/openzeppelin-contracts/",
          "smart-account/=lib/openmesh-admin/lib/smart-account/src/"
        ]
      },
      "evmVersion": "paris",
      "metadata": { "useLiteralContent": true },
      "viaIR": true
    }
  },
  "source": "/home/plopmenz/verified-contributor",
  "submitted": {
    "transactionHash": "0xa54c20ea22e7b77cc900bd52667633c8a25494e6b0c9d31fba76a1211a1005a8",
    "date": "2024-02-16T18:51:51.379Z"
  }
}
